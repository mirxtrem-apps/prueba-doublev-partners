// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_tdd/test/features/authentication/presentation/pages/register/register_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter_tdd/core/app/infrastructure/repositories/local_repository.dart'
    as _i9;
import 'package:flutter_tdd/core/di/di.dart' as _i5;
import 'package:flutter_tdd/features/authentication/infrastructure/repositories/auth_repository.dart'
    as _i6;
import 'package:flutter_tdd/features/user/infrastructure/models/user_model.dart'
    as _i4;
import 'package:flutter_tdd/features/user/infrastructure/repositories/user_repository.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAuth_0 extends _i1.SmartFake implements _i2.FirebaseAuth {
  _FakeFirebaseAuth_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_1 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i3.CollectionReference<T> {
  _FakeCollectionReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_3 extends _i1.SmartFake implements _i4.UserModel {
  _FakeUserModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_4 extends _i1.SmartFake
    implements _i5.SharedPreferences {
  _FakeSharedPreferences_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_0(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.FirebaseAuth);

  @override
  _i7.Future<_i2.UserCredential> register(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
          ],
        ),
        returnValue: _i7.Future<_i2.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.UserCredential>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i8.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CollectionReference<_i4.UserModel> get usersRef => (super.noSuchMethod(
        Invocation.getter(#usersRef),
        returnValue: _FakeCollectionReference_2<_i4.UserModel>(
          this,
          Invocation.getter(#usersRef),
        ),
      ) as _i3.CollectionReference<_i4.UserModel>);

  @override
  set usersRef(_i3.CollectionReference<_i4.UserModel>? _usersRef) =>
      super.noSuchMethod(
        Invocation.setter(
          #usersRef,
          _usersRef,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> createUser(_i4.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.UserModel> getUserById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i7.Future<_i4.UserModel>.value(_FakeUserModel_3(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.UserModel>);

  @override
  _i7.Future<void> updateUserById(_i4.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUserById,
          [user],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [LocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalRepository extends _i1.Mock implements _i9.LocalRepository {
  MockLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_4(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i5.SharedPreferences);

  @override
  set token(String? value) => super.noSuchMethod(
        Invocation.setter(
          #token,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentUser(String? value) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          value,
        ),
        returnValueForMissingStub: null,
      );
}
